-----------------------------------------------Assignment 1-----------------------------------------------------------------------
terraform --version
sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install terraform
terraform --version
 1318  mkdir tcode
 1319  ls
 1320  cd tcode/
 1321  nano provider.tf
 1322  nano ec2.tf
 1323  terraform init
 1324  nano ec2.tf 
 1326  terraform plan
 1329  terraform apply


----provider.tf-----
provider "aws" {
   access_key = ""
   secret_key = ""
   region = "us-east-2"
}

provider "azurerm" {

}

provider "google" {

}

provider "oci" {
  # Configuration options
}

-------ec2.tf-----
resource "aws_instance" "demo" {
  ami           = "ami-0430580de6244e02e" 
  instance_type = "t2.micro"            

  subnet_id     = aws_subnet.default.id
}
resource "aws_subnet" "default" {
  vpc_id     = aws_vpc.demo.id
  cidr_block = "10.0.0.0/24" # Default subnet CIDR block in Ohio region
}

resource "aws_vpc" "demo" {
  cidr_block = "10.0.0.0/16" # Default VPC CIDR block in Ohio region
}


---------------------------------------------------------Assignment 2------------------------------------------------------------
terraform destroy
   20  nano ec2elastic.tf 
   21  terraform init
   22  terraform plan
   23  terraform apply


---------ec2elastic.tf----------------------

resource "aws_instance" "example" {
  ami           = "ami-0430580de6244e02e"
  instance_type = "t2.micro"

  subnet_id     = aws_subnet.default.id
}

resource "aws_subnet" "default" {
  vpc_id     = aws_vpc.default.id
  cidr_block = "10.0.0.0/24" # Default subnet CIDR block in Ohio region
}

resource "aws_vpc" "default" {
  cidr_block = "10.0.0.0/16" # Default VPC CIDR block in Ohio region
}

resource "aws_network_interface" "example" {
  subnet_id = aws_subnet.default.id

  private_ips = ["10.0.0.100"] # Specify the private IP you want to associate with the Elastic IP
}

resource "aws_eip" "example" {
  instance = aws_instance.example.id
}


-------------------------------------------------------Assignment 3------------------------------------------------------------------
terraform destroy
sudo nano ec2ohioVirginia.tf
terraform init
terraform plan
terraform apply


----------provider.tf-----
provider "aws" {
   access_key = ""
   secret_key = ""
   # region = "us-east-2"
   region = "us-east-2" # Ohio (us-east-2) region
   alias  = "ohio"     # Alias for Ohio
} 
provider "azurerm" {

}

provider "google" {

}

provider "oci" {
  # Configuration options
}



-----------ec2ohioVirginia.tf-------
provider "aws" {
   region = "us-east-1" # virginia (us-east-1) region
   alias  = "virginia"     # Alias for virginia
}

resource "aws_instance" "hello-ohio" {
  ami           = "ami-0430580de6244e02e" # Replace with the desired AMI ID for Ohio
  instance_type = "t2.micro"           
  provider      = aws.ohio               # Use the Ohio provider alias

  tags = {
    Name = "hello-ohio"
  }
}

resource "aws_instance" "hello-virginia" {
  ami           = "ami-03a6eaae9938c858c" # Replace with the desired AMI ID for Virginia
  instance_type = "t2.micro"          
  provider      = aws.virginia           # Use the Virginia provider alias

  tags = {
    Name = "hello-virginia"
  }
}


--------------------------------------------------Assignment 4-----------------------------------------------------------
terraform destroy
sudo nano ec2vpc.tf
terraform init
terraform plan
terraform apply

---------ec2vpc.tf------------
# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16" # Customize the CIDR block as needed
}

# Create a subnet within the VPC
resource "aws_subnet" "my_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24" # Customize the CIDR block as needed
}

# Create an internet gateway
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id
}

# Create a route table
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }
}

# Associate the route table with the subnet
resource "aws_route_table_association" "my_subnet_association" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}

# Create a security group
resource "aws_security_group" "my_security_group" {
  name        = "my_security_group"
  description = "Allow SSH and HTTP traffic"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust the source IP range as needed
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust the source IP range as needed
  }
}

resource "aws_instance" "hello-ohio" {
  ami           = "ami-0430580de6244e02e" # Replace with the desired AMI ID for Ohio
  instance_type = "t2.micro"           
  provider      = aws.ohio               # Use the Ohio provider alias

  tags = {
    Name = "hello-ohio"
  }
}


--------------------------------------------------Assignment 5------------------------------------------------------------
terraform destroy
sudo nano apacheinstall.sh
aws ec2 create-key-pair --key-name demokey --query 'KeyMaterial' --output text > demokey.pem
sudo nano ec2apache.tf
terraform init
terraform plan
terraform apply
sudo nano publicip.sh
chmod +x publicip.sh
ls
cat instance_ip.txt

------apacheinstall.sh---------
#!/bin/bash
sudo apt-get update
sudo apt-get install -y apache2
sudo systemctl start apache2
sudo systemctl enable apache2


-------ec2apache.tf-----------
resource "aws_instance" "web" {
  ami           = "ami-0430580de6244e02e" 
  instance_type = "t2.micro"
  key_name      = "demokey"
  user_data     = file("apcheinstall.sh")

  tags = {
    Name = "ApacheInstance"
  }
}

output "public_ip" {
  value = aws_instance.web.public_ip
}

---------------publicip.sh----------
#!/bin/bash

instance_ip=$(terraform output public_ip)
echo "$instance_ip" > instance_ip.txt


------------------------------------------------------------CaseStudy------------------------------------------------------
sudo nano apacheinstall.sh
aws ec2 create-key-pair --key-name demokey --query 'KeyMaterial' --output text > keydemo.pem
sudo nano vpcec2.tf
terraform init
terraform plan
terraform apply

------apacheinstall.sh---------
#!/bin/bash
sudo apt-get update
sudo apt-get install -y apache2
sudo systemctl start apache2
sudo systemctl enable apache2



------------vpcec2.tf-----------------------
# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"  
  enable_dns_support = true
  enable_dns_hostnames = true
}

# Create a subnet within the VPC
resource "aws_subnet" "my_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24" 
}

resource "aws_subnet" "my_subnet1" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.2.0/24" 
}

# Create an internet gateway
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id
}

# Create a route table
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }
}

# Associate the route table with the subnet
resource "aws_route_table_association" "my_subnet_association" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}
resource "aws_route_table_association" "my_subnet_association1" {
  subnet_id      = aws_subnet.my_subnet1.id
  route_table_id = aws_route_table.my_route_table.id
}

# Create a security group
resource "aws_security_group" "demosg" {
  name        = "my_security_group"
  description = "Allow SSH and HTTP traffic"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust the source IP range as needed
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust the source IP range as needed
  }
}

resource "aws_instance" "demoec21" {
  ami           = "ami-0430580de6244e02e" 
  instance_type = "t2.micro"    
  key_name      = "demokey"
  user_data     = file("apacheinstall.sh")
  vpc_security_group_ids = [aws_security_group.demosg.id]   
  subnet_id     = aws_subnet.my_subnet.id   
  associate_public_ip_address = true  
  provider      = aws.ohio              

  tags = {
    Name = "demoec2-1"
  }
}

resource "aws_instance" "deemoec22" {
  ami           = "ami-0430580de6244e02e" 
  instance_type = "t2.micro"    
  key_name      = "demokey"
  user_data     = file("apacheinstall.sh")
  vpc_security_group_ids = [aws_security_group.demosg.id]   
  subnet_id     = aws_subnet.my_subnet1.id 
  associate_public_ip_address = true   
  provider      = aws.ohio              

  tags = {
    Name = "demoec2-2"
  }
}







































